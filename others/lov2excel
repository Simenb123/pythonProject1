#!/usr/bin/env python3
"""Interactive Lovdata downloader that writes an Excel file.

The script prompts the user for a LOV-ID and optional output filename.
It downloads the law from lovdata.no and stores each paragraph in an Excel
spreadsheet. The law HTML is fetched from ``https://lovdata.no/dokument/NL/lov/``.
"""

from __future__ import annotations

import re
from pathlib import Path

import pandas as pd
import requests
from bs4 import BeautifulSoup


def fetch_law_html(law_id: str) -> str:
    """Return the raw HTML for the given law from Lovdata.

    The law is fetched from
    ``https://lovdata.no/dokument/NL/lov/{law_id[4:].lower()}``.
    """
    url = f"https://lovdata.no/dokument/NL/lov/{law_id[4:].lower()}"
    headers = {
        # Using only ASCII characters avoids Unicode errors in HTTP headers
        "User-Agent": "lov2excel_prompt (github.com/<din-bruker>) - kontakt ved behov"

    }
    resp = requests.get(url, headers=headers, timeout=30)
    resp.raise_for_status()
    return resp.text


def parse_law(html: str, law_id: str) -> pd.DataFrame:
    """Parse Lovdata HTML to a DataFrame."""
    soup = BeautifulSoup(html, "html.parser")

    title_el = soup.find("h1") or soup.find("title")
    law_title = re.sub(r"\s+", " ", title_el.get_text(strip=True))

    rows = []
    current_chapter = ""
    for el in soup.select("h2, section"):
        if el.name == "h2":
            current_chapter = re.sub(r"\s+", " ", el.get_text(strip=True))
            continue

        section_id = el.get("id", "")
        if not section_id.startswith("§"):
            continue

        heading_el = el.find("h3")
        heading = heading_el.get_text(strip=True) if heading_el else ""

        text_parts = [p.get_text(" ", strip=True) for p in el.find_all("p", recursive=False)]
        text = " ".join(text_parts)

        rows.append(
            {
                "law_id": law_id,
                "law_title": law_title,
                "chapter": current_chapter,
                "section": section_id,
                "heading": heading,
                "text": text,
            }
        )

    if not rows:
        raise ValueError(
            "No sections found – check if the URL requires login or has changed format"
        )

    return pd.DataFrame(rows)


def main() -> None:
    law_id = input("LOV-ID (f.eks. LOV-2020-11-20-128): ").strip()
    if not law_id:
        print("Ingen LOV-ID oppgitt.")
        return
    out_file = input("Filnavn for Excel [lov.xlsx]: ").strip() or "lov.xlsx"

    html = fetch_law_html(law_id)
    try:
        df = parse_law(html, law_id)
    except ValueError as exc:
        print(f"Kunne ikke parse lov: {exc}")
        return

    out_path = Path(out_file)
    df.to_excel(out_path, index=False)
    print(f"✅ Skrev {len(df):,} paragrafer til {out_path.resolve()}")


if __name__ == "__main__":
    main()